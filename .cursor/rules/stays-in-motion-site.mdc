# Stays in Motion Site - Cursor AI Rules

## Project Overview
Stays in Motion Site is the marketing website for the Mova fitness platform. Built with Bun runtime, React 19, TailwindCSS v4, and Radix UI components. Serves as the marketing front-end and documentation hub for the Mova mobile app and backend services.

## Core Architecture
- **Runtime**: Bun (NOT Node.js) - use Bun.serve() for SSR
- **Framework**: React 19 with modern patterns (no Next.js/Vite)
- **Styling**: TailwindCSS v4 with CSS custom properties
- **UI Components**: Radix UI primitives with custom styling
- **Forms**: React Hook Form with Zod validation
- **Package Manager**: Bun (package.json shows bun usage)
- **Build System**: Custom Bun-based build process

## File Organization Patterns

### Project Structure
```
stays-in-motion-site/
├── src/
│   ├── components/        # React components
│   │   ├── ui/           # Reusable UI components (Radix-based)
│   │   ├── forms/        # Form components
│   │   ├── layout/       # Layout components
│   │   └── sections/     # Page sections
│   ├── pages/            # Page components
│   ├── lib/              # Utility functions
│   ├── styles/           # Global styles and TailwindCSS
│   └── index.tsx         # Entry point (Bun.serve)
├── public/               # Static assets
├── build.ts              # Custom build script
└── package.json          # Bun configuration
```

### Component Organization
```typescript
// UI components following Radix patterns
export { Button } from './ui/Button';
export { Input } from './ui/Input';
export { Select } from './ui/Select';

// Layout components
export { Header } from './layout/Header';
export { Footer } from './layout/Footer';
export { Navigation } from './layout/Navigation';

// Section components for marketing pages
export { HeroSection } from './sections/HeroSection';
export { FeaturesSection } from './sections/FeaturesSection';
export { PricingSection } from './sections/PricingSection';
```

## Code Style Guidelines

### React 19 Patterns
- Use modern React patterns with hooks and function components
- Leverage React 19 features (actions, transitions, etc.):
```typescript
import { useState, useTransition } from 'react';

export function ContactForm() {
  const [isPending, startTransition] = useTransition();
  
  const handleSubmit = (formData: FormData) => {
    startTransition(async () => {
      // Handle form submission
    });
  };
  
  return (
    <form action={handleSubmit}>
      {/* Form content */}
    </form>
  );
}
```

### Bun-specific Patterns
- Use Bun.serve() for the server:
```typescript
// src/index.tsx
import { Bun } from 'bun';
import { renderToString } from 'react-dom/server';
import App from './App';

const server = Bun.serve({
  port: 3000,
  fetch(request) {
    const html = renderToString(<App />);
    
    return new Response(`<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Stays in Motion</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
  <div id="root">${html}</div>
  <script src="/bundle.js"></script>
</body>
</html>`, {
      headers: { 'Content-Type': 'text/html' },
    });
  },
});

console.log(`Server running at http://localhost:${server.port}`);
```

### TailwindCSS v4 Patterns
- Use modern TailwindCSS v4 syntax and features
- Leverage CSS custom properties for theming:
```css
/* styles/globals.css */
@import "tailwindcss";

@theme {
  --color-primary: #3b82f6;
  --color-secondary: #64748b;
  --radius: 0.5rem;
}

:root {
  --background: 0 0% 100%;
  --foreground: 222.2 84% 4.9%;
  --primary: 221.2 83.2% 53.3%;
  --primary-foreground: 210 40% 98%;
}

.dark {
  --background: 222.2 84% 4.9%;
  --foreground: 210 40% 98%;
}
```

### Component Styling Patterns
```typescript
// Use utility classes with proper theming
export function Button({ variant = 'primary', children, ...props }) {
  return (
    <button
      className={cn(
        'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors',
        'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring',
        'disabled:pointer-events-none disabled:opacity-50',
        {
          'bg-primary text-primary-foreground hover:bg-primary/90': variant === 'primary',
          'bg-secondary text-secondary-foreground hover:bg-secondary/80': variant === 'secondary',
        }
      )}
      {...props}
    >
      {children}
    </button>
  );
}
```

## UI Component Guidelines

### Radix UI Integration
- Use Radix primitives for complex components:
```typescript
import * as Select from '@radix-ui/react-select';
import { ChevronDown } from 'lucide-react';

export function CustomSelect({ children, ...props }) {
  return (
    <Select.Root {...props}>
      <Select.Trigger className="inline-flex items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm">
        <Select.Value />
        <Select.Icon>
          <ChevronDown className="h-4 w-4 opacity-50" />
        </Select.Icon>
      </Select.Trigger>
      <Select.Portal>
        <Select.Content className="relative z-50 rounded-md border bg-popover text-popover-foreground shadow-md">
          <Select.Viewport className="p-1">
            {children}
          </Select.Viewport>
        </Select.Content>
      </Select.Portal>
    </Select.Root>
  );
}
```

### Form Patterns with React Hook Form + Zod
```typescript
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';

const contactSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Please enter a valid email'),
  message: z.string().min(10, 'Message must be at least 10 characters'),
});

type ContactForm = z.infer<typeof contactSchema>;

export function ContactForm() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<ContactForm>({
    resolver: zodResolver(contactSchema),
  });
  
  const onSubmit = async (data: ContactForm) => {
    // Handle form submission
  };
  
  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div>
        <label htmlFor="name" className="block text-sm font-medium text-foreground">
          Name
        </label>
        <input
          {...register('name')}
          type="text"
          className="mt-1 block w-full rounded-md border border-input bg-background px-3 py-2"
        />
        {errors.name && (
          <p className="mt-1 text-sm text-destructive">{errors.name.message}</p>
        )}
      </div>
      {/* Other form fields */}
      <button
        type="submit"
        disabled={isSubmitting}
        className="w-full rounded-md bg-primary px-4 py-2 text-primary-foreground hover:bg-primary/90 disabled:opacity-50"
      >
        {isSubmitting ? 'Sending...' : 'Send Message'}
      </button>
    </form>
  );
}
```

## Performance Guidelines

### Bun Optimizations
- Leverage Bun's fast startup and module resolution
- Use Bun's built-in bundling for optimal performance
- Implement proper caching strategies:
```typescript
// Implement static asset caching
const server = Bun.serve({
  fetch(request) {
    const url = new URL(request.url);
    
    // Serve static assets with cache headers
    if (url.pathname.startsWith('/assets/')) {
      return new Response(Bun.file(`./public${url.pathname}`), {
        headers: {
          'Cache-Control': 'public, max-age=31536000, immutable',
        },
      });
    }
    
    // Handle dynamic routes
    return handleRoute(request);
  },
});
```

### React Performance
- Use React.memo for expensive components
- Implement proper code splitting for large pages
- Optimize images with proper sizing and formats
- Use lazy loading for below-the-fold content

### Build Optimization
```typescript
// build.ts - Custom Bun build script
import { build } from 'bun';

await build({
  entrypoints: ['./src/index.tsx'],
  outdir: './dist',
  target: 'browser',
  minify: true,
  splitting: true,
  sourcemap: 'external',
  define: {
    'process.env.NODE_ENV': '"production"',
  },
});

console.log('Build completed successfully!');
```

## SEO and Marketing Guidelines

### Meta Tags and SEO
```typescript
export function SEOHead({ title, description, image }: SEOProps) {
  return (
    <head>
      <title>{title} | Stays in Motion</title>
      <meta name="description" content={description} />
      <meta property="og:title" content={title} />
      <meta property="og:description" content={description} />
      <meta property="og:image" content={image} />
      <meta name="twitter:card" content="summary_large_image" />
      <meta name="twitter:title" content={title} />
      <meta name="twitter:description" content={description} />
      <meta name="twitter:image" content={image} />
      <link rel="canonical" href={`https://staysinmotion.com${pathname}`} />
    </head>
  );
}
```

### Analytics Integration
```typescript
// lib/analytics.ts
export function trackEvent(eventName: string, properties?: Record<string, any>) {
  if (typeof window !== 'undefined' && window.gtag) {
    window.gtag('event', eventName, {
      ...properties,
      timestamp: new Date().toISOString(),
    });
  }
}

// Usage in components
import { trackEvent } from '../lib/analytics';

export function DownloadButton() {
  const handleClick = () => {
    trackEvent('download_button_clicked', {
      location: 'hero_section',
      platform: 'ios',
    });
  };
  
  return (
    <button onClick={handleClick} className="...">
      Download for iOS
    </button>
  );
}
```

## Content Management Patterns

### Static Content Organization
```typescript
// lib/content.ts
export const features = [
  {
    id: 'playlist-conversion',
    title: 'Playlist to Workout',
    description: 'Convert any Spotify playlist into structured workout intervals',
    icon: 'Music',
  },
  {
    id: 'ai-generation',
    title: 'AI Class Generator',
    description: 'Generate complete fitness classes with AI-powered music curation',
    icon: 'Sparkles',
  },
  // More features...
];

export const testimonials = [
  {
    id: 1,
    name: 'Sarah Johnson',
    role: 'Fitness Instructor',
    content: 'Mova has transformed how I create workout playlists...',
    image: '/testimonials/sarah.jpg',
  },
  // More testimonials...
];
```

### Dynamic Content Loading
```typescript
// For blog posts or dynamic content
export async function getPostBySlug(slug: string) {
  try {
    const response = await fetch(`/api/posts/${slug}`);
    if (!response.ok) throw new Error('Post not found');
    return await response.json();
  } catch (error) {
    console.error('Error fetching post:', error);
    return null;
  }
}
```

## Integration with Mova Platform

### Deep Links to Mobile App
```typescript
export function AppDownloadSection() {
  const handleDownload = (platform: 'ios' | 'android') => {
    const links = {
      ios: 'https://apps.apple.com/app/mova-fitness',
      android: 'https://play.google.com/store/apps/details?id=com.mova.app',
    };
    
    // Track download attempt
    trackEvent('app_download_initiated', { platform });
    
    // Open app store
    window.open(links[platform], '_blank');
  };
  
  return (
    <section className="py-16 bg-primary/5">
      <div className="container mx-auto px-4 text-center">
        <h2 className="text-3xl font-bold mb-4">Ready to Get Started?</h2>
        <p className="text-lg text-muted-foreground mb-8">
          Download Mova and transform your workout experience today.
        </p>
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <button
            onClick={() => handleDownload('ios')}
            className="inline-flex items-center justify-center rounded-lg bg-black text-white px-6 py-3 font-medium"
          >
            <AppleIcon className="mr-2 h-5 w-5" />
            Download for iOS
          </button>
          <button
            onClick={() => handleDownload('android')}
            className="inline-flex items-center justify-center rounded-lg bg-green-600 text-white px-6 py-3 font-medium"
          >
            <PlayStoreIcon className="mr-2 h-5 w-5" />
            Download for Android
          </button>
        </div>
      </div>
    </section>
  );
}
```

### API Integration for Demos
```typescript
// For showcasing backend capabilities
export async function DemoConverter() {
  const [isLoading, setIsLoading] = useState(false);
  const [result, setResult] = useState(null);
  
  const handleDemo = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/demo/convert', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          playlistUrl: 'https://open.spotify.com/playlist/demo',
        }),
      });
      
      const data = await response.json();
      setResult(data);
    } catch (error) {
      console.error('Demo failed:', error);
    } finally {
      setIsLoading(false);
    }
  };
  
  return (
    <div className="border rounded-lg p-6">
      <h3 className="text-xl font-semibold mb-4">Try the Converter</h3>
      <button
        onClick={handleDemo}
        disabled={isLoading}
        className="bg-primary text-primary-foreground px-4 py-2 rounded-md disabled:opacity-50"
      >
        {isLoading ? 'Converting...' : 'Demo Playlist Conversion'}
      </button>
      {result && (
        <div className="mt-4 p-4 bg-muted rounded-md">
          <pre className="text-sm">{JSON.stringify(result, null, 2)}</pre>
        </div>
      )}
    </div>
  );
}
```

## Development Workflow

### Local Development
```bash
# Start development server with hot reload
bun dev

# Build for production
bun run build

# Preview production build
bun run preview

# Development workflow
bun install                    # Install dependencies
bun dev                        # Start dev server
bun run build:pages            # Build static pages
```

### Production Deployment
```typescript
// Deployment configuration
const buildConfig = {
  outdir: 'dist',
  minify: process.env.NODE_ENV === 'production',
  sourcemap: process.env.NODE_ENV === 'development' ? 'inline' : 'external',
  target: 'browser',
  format: 'esm',
};
```

## Accessibility Guidelines

### Semantic HTML
- Use proper heading hierarchy (h1 → h2 → h3)
- Implement ARIA labels for interactive elements
- Ensure keyboard navigation works properly
- Use semantic HTML elements (`<nav>`, `<main>`, `<section>`)

### Focus Management
```typescript
export function Modal({ isOpen, onClose, children }) {
  const modalRef = useRef<HTMLDivElement>(null);
  
  useEffect(() => {
    if (isOpen && modalRef.current) {
      modalRef.current.focus();
    }
  }, [isOpen]);
  
  return (
    <div
      ref={modalRef}
      className="fixed inset-0 z-50 bg-black/50"
      role="dialog"
      aria-modal="true"
      tabIndex={-1}
    >
      <div className="flex items-center justify-center min-h-screen p-4">
        <div className="bg-white rounded-lg p-6 max-w-md w-full">
          {children}
        </div>
      </div>
    </div>
  );
}
```

## Common Anti-Patterns to Avoid

### Don't:
- Use Node.js patterns (use Bun-specific APIs)
- Mix TailwindCSS versions (stick to v4)
- Skip accessibility considerations
- Use complex state management (keep it simple)
- Ignore SEO best practices
- Forget to track user interactions
- Use heavy JavaScript frameworks unnecessarily
- Skip performance optimizations

### Do:
- Use modern React patterns and hooks
- Implement proper error boundaries
- Use TypeScript for type safety
- Follow semantic HTML practices
- Optimize for Core Web Vitals
- Implement proper loading states
- Use responsive design principles
- Test across different devices and browsers

## Environment Setup Requirements
```bash
# Development dependencies
bun install

# Environment variables (if needed)
# No API keys required for static marketing site

# Development workflow
bun dev                        # Start development server
bun run build                  # Build for production
bun run preview                # Preview production build
```

## File Naming Conventions
- Components: `PascalCase.tsx` (e.g., `HeroSection.tsx`)
- Pages: `kebab-case.tsx` or `PascalCase.tsx`
- Utils: `camelCase.ts` (e.g., `formatDate.ts`)
- Styles: `kebab-case.css` (e.g., `global.css`)
- Assets: `kebab-case` format (e.g., `hero-image.jpg`)

Remember: This is a marketing website that needs to convert visitors and showcase the Mova platform effectively. Focus on performance, accessibility, SEO, and compelling user experience design.